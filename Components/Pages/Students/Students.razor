@page "/students"
@inject StudentMedia.Data.IStudentService StudentService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Students</PageTitle>

<h4>Alunos</h4>

<button class="btn btn-success mb-5" @onclick="() => NewStudent()">Novo</button>
<table class="table">
    <thead>
        <tr>
            <th>Nome</th>
            <th>Documento</th>
            <th class="col-2"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in students)
        {
            <tr>
                <td>@student.Name</td>
                <td>@student.Document</td>
                <td>
                    <button class="btn btn-sm btn-primary" @onclick="() => ShowEditStudentModal(student)">Editar</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirmation(student)">Excluir</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (!students?.Any() ?? true)
{
    <p class="text-center">Nenhum aluno cadastrado.</p>
}

@if (showConfirmationModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Exclus√£o</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Tem certeza que deseja excluir o aluno @studentToDelete?.Name? </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button class="btn btn-danger" @onclick="ConfirmDelete">Excluir</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show"></div>
}

@if (showNewStudentModal)
{
    <StudentModal
        student="newStudent"
        title="Novo Aluno"
        OnValidSubmit="CreateStudent"
        CloseModalCallback="CloseModal" />
}

@if (showEditStudentModal)
{
    <StudentModal
        student="editStudent"
        title="Editar Aluno"
        OnValidSubmit="UpdateStudent"
        CloseModalCallback="CloseModal" />
}

@code {
    private List<Models.Student>? students;
    private Models.Student newStudent = new Models.Student();
    private Models.Student studentToDelete;
    private Models.Student editStudent;
    private bool showConfirmationModal = false;
    private bool showNewStudentModal = false;
    private bool showEditStudentModal = false;

    protected override async Task OnInitializedAsync()
    {
        students = await StudentService.GetStudentsAsync();
    }

    private void ShowDeleteConfirmation(Models.Student student)
    {
        studentToDelete = student;
        showConfirmationModal = true;
    }

    private void CloseModal()
    {
        showConfirmationModal = false;
        showNewStudentModal = false;
        showEditStudentModal = false;
    }

    private async Task ConfirmDelete()
    {
        await DeleteStudent(studentToDelete.Id);
        showConfirmationModal = false;
    }

    private async Task DeleteStudent(int id)
    {
        await StudentService.DeleteStudentAsync(id);
        students = await StudentService.GetStudentsAsync();
    }

    private void NewStudent()
    {
        showNewStudentModal = true;
    }

    private void ShowEditStudentModal(Models.Student student)
    {
        editStudent = student;
        showEditStudentModal = true;
    }

    private async Task CreateStudent()
    {
        await StudentService.AddStudentAsync(newStudent);
        newStudent = new Models.Student();
        students = await StudentService.GetStudentsAsync();
        CloseModal();
    }

    private async Task UpdateStudent()
    {
        await StudentService.UpdateStudentAsync(editStudent);
        students = await StudentService.GetStudentsAsync();
        CloseModal();
    }
}
