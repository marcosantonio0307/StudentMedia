@page "/"
@inject StudentMedia.Data.IStudentService StudentService
@inject StudentMedia.Data.IPeriodService PeriodService
@inject StudentMedia.Data.IMatterService MatterService
@inject StudentMedia.Data.INoteService NoteService
@using StudentMedia.Models
@inject ILogger<Home> Logger
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Bem vindo ao Média Fácil</h1>

<p class="mb-5">Acompanhe a média dos seus alunos.</p>

<label for="periodSelect">Período:</label>
<InputSelect id="periodSelect" class="form-select" @bind-Value="selectedPeriodId">
    @foreach (var period in periods)
    {
        <option value="@period.Id">@period.Name</option>
    }
</InputSelect>

<label for="matterSelect">Matéria:</label>
<InputSelect id="matterSelect" class="form-select" @bind-Value="selectedMatterId">
    @foreach (var matter in matters)
    {
        <option value="@matter.Id">@matter.Name</option>
    }
</InputSelect>


<table class="table">
    <thead>
        <tr>
            <th>Nome</th>
            @if (selectedPeriod != null)
            {
                @for (int i = 1; i <= selectedPeriod.NotesAmount; i++)
                {
                    <th>Nota @i</th>
                }
            }
            <th>Média</th>
            <th class="col-3"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in students)
        {
            <tr>
                <td>@student.Name</td>
                @if (selectedPeriod != null)
                {
                    @foreach (var note in student.Notes)
                    {
                        if (note.PeriodId == selectedPeriod.Id)
                        {
                            <td class="user-select-none" @onclick="() => EditNote(note)">@note.Score</td>
                        }
                        else
                        {
                            <td>-</td>
                        }
                    }

                    @for (int i = student.Notes.Count; i < selectedPeriod.NotesAmount; i++)
                    {
                        <td>-</td>
                    }
                    <td>@CalcMediaByNotes(student.Notes)</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => AddNote(student)">Adicionar</button>
                        @if (student.Notes.Any())
                        {
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteNote(student.Notes.Last())">Remover Última</button>
                        } else
                        {
                            <button class="btn btn-sm btn-secondary" disabled>Remover Última</button>
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@if (showNoteModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@noteModalTitle</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="noteModal" OnValidSubmit="SubmitNote" FormName="noteForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label" for="scoreInput">Nota</label>
                            <InputNumber id="scoreInput" class="form-control" @bind-Value="noteModal.Score" step="0.01" required />
                        </div>
                        <button type="submit" class="btn btn-primary">Salvar</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteNoteModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmar Exclusão</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="CloseModal">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Tem certeza que deseja excluir a última nota de @noteToDelete.Student.Name</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseModal">Cancelar</button>
                    <button class="btn btn-danger" @onclick="ConfirmDeleteNote">Excluir</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Models.Student>? students;
    private List<Models.Period>? periods;
    private List<Models.Matter>? matters;
    private Models.Period? selectedPeriod;
    private Models.Matter? selectedMatter;
    private Models.Note noteModal = new Models.Note();
    private Models.Note noteToDelete;
    private bool showNoteModal = false;
    private bool showDeleteNoteModal = false;
    private string noteModalTitle = "Adicionar Nota";

    private int _selectedPeriodId;
    private int selectedPeriodId
    {
        get => _selectedPeriodId;
        set
        {
            if (_selectedPeriodId != value)
            {
                _selectedPeriodId = value;
                _ = FilterByPeriodAndMatter();
            }
        }
    }

    private int _selectedMatterId;
    private int selectedMatterId
    {
        get => _selectedMatterId;
        set
        {
            if (_selectedMatterId != value)
            {
                _selectedMatterId = value;
                _ = FilterByPeriodAndMatter();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        students = await StudentService.GetStudentsAsync();
        periods = await PeriodService.GetPeriodsAsync();
        matters = await MatterService.GetMattersAsync();
        if (periods != null && periods.Count > 0 && matters != null && matters.Count > 0)
        {
            selectedPeriodId = periods[0].Id;
            selectedPeriod = periods[0];
            selectedMatterId = matters[0].Id;
            selectedMatter = matters[0];
            students = await StudentService.GetStudentsWithNotesByPeriodAndMatterAsync(selectedPeriodId, selectedMatterId);
        }
    }

    private async Task FilterByPeriodAndMatter()
    {
        Logger.LogInformation("Filtering by period with ID: {SelectedPeriodId}", selectedPeriodId);
        selectedPeriod = await PeriodService.GetPeriodByIdAsync(selectedPeriodId);
        selectedMatter = await MatterService.GetMatterByIdAsync(selectedMatterId);
        if (selectedPeriodId != 0)
        {
            students = await StudentService.GetStudentsWithNotesByPeriodAndMatterAsync(selectedPeriodId, selectedMatterId);
        }
        StateHasChanged();
    }

    private double CalcMediaByNotes(ICollection<Models.Note> notes)
    {
        if (notes == null || notes.Count == 0)
        {
            return 0;
        } else {
            return Math.Round(notes.Average(n => n.Score), 2);
        }
    }

    private void CloseModal()
    {
        showNoteModal = false;
        showDeleteNoteModal = false;
    }

    private void AddNote(Models.Student student)
    {
        noteModal = new Models.Note
        {
            PeriodId = selectedPeriodId,
            MatterId = selectedMatterId,
            StudentId = student.Id
        };
        noteModalTitle = "Adicionar Nota para " + student.Name;
        showNoteModal = true;
    }

    private void EditNote(Models.Note note)
    {
        noteModal = note;
        noteModalTitle = "Editar Nota de " + note.Student.Name;
        showNoteModal = true;
    }

    private async Task SubmitNote()
    {
        if (noteModal.Id == 0)
        {
            await NoteService.AddNoteAsync(noteModal);
        }
        else
        {
            await NoteService.UpdateNoteAsync(noteModal);
        }
        noteModal = new Models.Note();
        students = await StudentService.GetStudentsWithNotesByPeriodAndMatterAsync(selectedPeriodId, selectedMatterId);
        showNoteModal = false;
    }

    private void DeleteNote(Models.Note note)
    {
        if (note != null)
        {
            noteToDelete = note;
            showDeleteNoteModal = true;
        }
    }

    private async Task ConfirmDeleteNote()
    {
        if (noteToDelete != null)
        {
            await NoteService.DeleteNoteAsync(noteToDelete.Id);
            students = await StudentService.GetStudentsWithNotesByPeriodAndMatterAsync(selectedPeriodId, selectedMatterId);
        }
        showDeleteNoteModal = false;
    }
}